Creating a component:
Create a class. Should look like this:

class CLASS_NAME extends React.Component {
  render() {

  }
}

A component can have three different aspects to it:
1. State
2. Lifecycle
3. User Interface (UI)

To describe #3 (UI), a component will ALWAYS have render(){} attached to it. Inside of the render body we will return the UI we want displayed. We write this with JSX and Babel will convert JSX into regular JavaScript.

To get the UI displayed on the DOM, we use ReactDOM. It'll consist of two arguments:
1. A React element - JSX creates an element (or an HTML tag) that you can use in ReactDOM 
2. Where to render the element to - this will usually be 

Import CSS to the index.js so the styles apply to the component 

Since modules are being used (React, ReactDOM, etc.) we need to use Webpack to bundle them together. We also need to bring in Babel to transform JSX into JS.

After installing Webpack, create webpack.config.js file and define three import settings:
1. Entry point
2. Where the bundle that webpack creates is going to go 
3. The module rules
----------------------------------------------------
Props are a way to pass data into components, just like parameters pass data into functions
PROPS ARE TO COMPONENTS WHAT ARGUMENTS ARE TO FUNCTIONS
Two aspects to props:
1. How to pass data into components
2. How to access props that have been passed in
----------------------------------------------------
To render lists with React you can use .map() but instead of returning another array, you can use JSX to return a list. So it would look like this:

<ul id="tweets">
  {tweets.map((tweet) => (
    <li>
      {tweet.text}
    </li>
  ))}
</ul>

One caveat: when you use .map to create a list, you have to add a unique key prop to each list item. This is due to the fact that it's React's to render the list as fast as possible. It helps React to know what items, if any, changed throughout different renders of that particular component. So it would look like this:
<ul id="tweets">
  {tweets.map((tweet) => (
    <li key={tweet.id}>
      {tweet.text}
    </li>
  ))}
</ul>
----------------------------------------------------
When creating a new component, be sure to export it so that it can be fed into the main index.js file. This of course means you must import that new component into the index.js file.
----------------------------------------------------
'this' keyword allows us to decide which objects should be focal when invoking a function or method
4 rules of this keyword:
1. Implicit binding
2. Explicit binding
3. new binding
4. window Binding
First thing to ask: where is this function INVOKED?
Ex:
var sayName = function(name) {
  console.log('Hello, ' + name);
}
No way to tell what 'this' would be pointing to since there's no invoking.

IMPLICIT BINDING: 'this' points to whatever is on the left of the dot at invocation

EXPLICIT BINDING: 
.call() allows you to write a method that can be used on different objects. Similar to implicit but instead of whats on the left of the dot, whats the first parameter in the parenthesis? 
Ex:
var sayName = function(lang1, lang2, lang3) {
  console.log('My name is ' + this.name + ' and I know ' + lang1 + ', " + lang2 + ', and ' + lang3);
};

var stacey = {
  name: 'Stacey',
  age: 34
};

var languages = ['JavaScript', 'Ruby', 'Python'];
sayName.call(stacey, languages[0], languages[1], languages[2]);
We are invoking sayName in the context of stacey (stacey.name) and passing along three parameters

.apply() does the same thing as .call() but you can pass in the name of the array instead of each individual argument and .apply() will automatically parse it out for you.
Ex:
var sayName = function(lang1, lang2, lang3) {
  console.log('My name is ' + this.name + ' and I know ' + lang1 + ', " + lang2 + ', and ' + lang3);
};

var stacey = {
  name: 'Stacey',
  age: 34
};

var languages = ['JavaScript', 'Ruby', 'Python'];
sayName.apply(stacey, languages);

.bind() is also almost the exact same as .call() except it will return a new function that you can invoke later instead of invoking the original function 
Ex:
var sayName = function(lang1, lang2, lang3) {
  console.log('My name is ' + this.name + ' and I know ' + lang1 + ', " + lang2 + ', and ' + lang3);
};

var stacey = {
  name: 'Stacey',
  age: 34
};

var languages = ['JavaScript', 'Ruby', 'Python'];
var newFunction = sayName.bind(stacey, languages[0], languages[1], languages[2]); 
newFn();

NEW BINDING:
When a function is invoked with the 'new' keyword, 'this' is bound to the new object being constructed. Behind the scenes JS creates a new object and saves it as 'this'.
Ex:
*Note- the function name being capitalized (Animal) indicates a constructor function and that it should be called with the 'new' keyword
var Animal = function(color, name, type) {
  this.color = color;
  this.name = name;
  this.type = type;
};

var zebra = new Animal('black and white', 'Zorro', 'Zebra')
There when you see the word 'new', 'this' refers to Animal

WINDOW BINDING 
If you invoke a function that uses the 'this' keyword but doesn't use 'new', doesn't have anything left of the dot, or doesn't use call/apply/bind, 'this' will default to the window object. Normally it will return undefined. If you use 'strict mode', it will throw a type error.
var sayAge = function() {
  console.log(this.age);
}

var me = {
  age: 25
}

sayAge(); // undefined
window.age = 35;
sayAge(); // 35
----------------------------------------------------
STATE 
1. How do you add state to a React component?
  - Use the constructor method (part of es6, not React)
  - At the top of the class include the constructor and pass in props. In the constructor body there will be super(props). 
  
  class CLASS_NAME extends React.Component {
    constructor(props) {
      super(props)

      this.state = {
        name: 'James'
      }
    }


    render() {

    }
  }

  - 'Super' refers to the constructor method of the class being extended (React.Component in this case). It is used to access and call functions on an object's parent. You have to use 'super' before you can use 'this'.
  - Finally, you add a state property on the components instance 'this'. This allows you to access that instance anywhere in the class.

2. How do you update a React component's state?
  - setState is how React allows you to update the state of the component and re-render the UI. 
  - Two forms of setState:
      1. Accepts object as its first argument that is merged with the current state 
      updateName(newName) {
        this.setState({ 
          name: newName 
        })
      }
      - When updateName is invoked, React will update name to be whatever newName is. Since the state changes, React will render and get a new UI based on the new state and update the DOM.
      - It will look like this:
      class Hello extends React.Component {
        constructor(props) {
          super(props)

          this.state = {
            name: 'James'
          }

          this.updateName = this.updateName.bind(this)
        }
        updateName() {
          this.setState({
            name: 'Shyonna'
          })
        }

        render() {
          return (
            <React.Fragment>
              <h1>Hello, {this.state.name}</h1>
              <button onClick={this.updateName}>Change Name</button>
            </React.Fragment>
          )
        }
      }

      2. Accepts a function as its first argument instead of an object. That function is passed the current state and the object that's returned will be merged into the new state.
      addFriend(newFriend) {
        this.setState((state) => {
          return {
            friends: state.friends.concat(newFriend)
          }
        })
      }
  - When do you use function setState vs object setState? Depends on what changes are being made to the state.
  - If the current state is being updated based on the previous state, use function setState.
  - Otherwise, use object setState
----------------------------------------------------
- Can you build a component just using a regular JS function? YES!
- One caveat, however: that component needs to have only a render method. It would look like this:
function HelloWorld (props) {
  return (
    <div>Hello {props.name}</div>
  )
}
- This is much cleaner AND you dont have to worry about the 'this' keyword since the component passes props as the first argument.
----------------------------------------------------
PROPTYPES
- Whenever we create a component that accepts props, we'll add a propTypes property to that component.
- Proptypes is an object whose keys represent the props and values represent the data types for those props 
- Let's say a Hello function component takes one prop of name, which is a string and is required:
  import React from 'react'
  import PropTypes from 'prop-types 

  export default function Hello ({ name }) {
    return <h1>Hello, {name}</h1>
  }


  Hello.propTypes = {
    name: PropTypes.string.isRequired
  }
- When using the component:
  <Hello /> // Warning: Failed prop type: The prop 'name' is marked as required....
  <Hello name={true} /> // Warning: Failed prop type: Invalid prop 'name' of type 'boolean'...
- Class components work the same way:
  class Hello extends React.Component {
    render() {
      return <h1>Hello, {this.props.name}</h1>
    }
  }

  Hello.propTypes = {
    name: PropTypes.string.isRequired
  }
----------------------------------------------------
COMPONENT LIFECYCLE 
Lifecycle is broken down into 3 parts:
  1. When the component gets added to DOM (mounting)
  2. When the component updates its state or receives new data via props (updating)
  3. When the component gets removed from the DOM (unmounting)
Mounting could consist of:
  - Setting the components initial state
      *Uses the constructor method 
  - Rendering a DOM node 
      *render() (needs to be a pure function)
  - Making an AJAX request
      *componentDidMount invoked only one time when the component is first mounted to the DOM. Therefore, its a good place to make an AJAX request
  - Setting up listeners (via Websockets, Firebase, etc.)
      *componentDidMount also 
Updating could consist of:
  - Re-rendering the UI with updated state or props
      *render() or setState 
  - Re-fetching data
      *componentDidUpdate is invoked after the component's local state changes or after receiving new props but NOT on the initial render 
      *Passed two arguments: the component's previous props and the component's previous state. This allows you to compare the previous state to the current state to decide if you want or need to do anything.
  - Re-setting a listener 
      *componentDidUpdate also 
Unmounting could consist of:
  - Cleanup, remove listeners, etc.
      *componentWillUnmount
Other lifecycle methods:
  -getDerivedStateFromProps
  -shouldComponentUpdate
  -getSnapshotBeforeUpdate
----------------------------------------------------
Controlled vs Uncontrolled components
- With React, state lives in components (controlled component). With forms, state lives in DOM (uncontrolled).
- So where should form state live in React??
- Controlled = "the React way"
- Controlled is preferred over uncontrolled. The whole point of React is to give React control over your state.
----------------------------------------------------
HIGHER ORDER COMPONENTS
- The most popular pattern to keep your code DRY
- Example: lets say we need to recreate the Stripe dashboard. We need to create tooltips when you hover over the SVG elements. To do this, we need three components: Info, TrendChart, and Daily Chart. Let's start with Info:

  class Info extends React.Component {
    render() {
      return (
        <svg
          className="Icon-svg Icon--hoverable-svg"
          height={this.props.height}
          viewBox="0 0 16 16" width="16">
            <path d="M9 8al 1 0 0 0-1-1H5.5al 1 0 1 0 0 2H7v4al 1 0 etc....>
        </svg>
      )
    }
  }
- To add functionality to Info, we can use onMouseOver and onMouseOut events. To do this we'll add a hovering state property to our component so that we can cause a re-render when the hovering state changes, which will show the tooltip.
  class Info extends React.Component {
    constructor(props) {
      super(props)

      this.state = {
        hovering: false
      }

      this.mouseOver = this.mouseOver.bind(this)
      this.mouseOut = this.mouseOut.bind(this)
    }
    mouseOver() {
      this.setState({hovering: false})
    }
    mouseOut() {
      this.setState({hovering: false})
    }
    render() {
      return (
        <svg
          className="Icon-svg Icon--hoverable-svg"
          height={this.props.height}
          viewBox="0 0 16 16" width="16">
            <path d="M9 8al 1 0 0 0-1-1H5.5al 1 0 1 0 0 2H7v4al 1 0 etc....>
        </svg>
      )
    }
  }
- Now we need to do the same thing to the other two components mentioned earlier: TrendChart and DailyChart. 
  class TrendChart extends React.Component {
    constructor(props) {
      super(props)

      this.state = {
        hovering: false
      }

      this.mouseOver = this.mouseOver.bind(this)
      this.mouseOut = this.mouseOut.bind(this)
    }
    mouseOver() {
      this.setState({hovering: false})
    }
    mouseOut() {
      this.setState({hovering: false})
    }
    render() {
      return (
        <>
          {this.state.hovering === true
            ? <Tooltip id={this.props.id} />
            : null }
          <Chart 
            type='trend'
            onMouseOver={this.mouseOver}
            onMouseOut={this.mouseOut}
          />
        </>
      )
    }
  }
- We can do the exact same thing for the final component: DailyChart
  class DailyChart extends React.Component {
    constructor(props) {
      super(props)

      this.state = {
        hovering: false
      }

      this.mouseOver = this.mouseOver.bind(this)
      this.mouseOut = this.mouseOut.bind(this)
    }
    mouseOver() {
      this.setState({hovering: false})
    }
    mouseOut() {
      this.setState({hovering: false})
    }
    render() {
      return (
        <>
          {this.state.hovering === true
            ? <Tooltip id={this.props.id} />
            : null }
          <Chart 
            type='trend'
            onMouseOver={this.mouseOver}
            onMouseOut={this.mouseOut}
          />
        </>
      )
    }
  }
- What's the PROBLEM? 
It's pretty clear...not DRY code. A lot of repitition.
- What's the SOLUTION?
Higher order components.
- HOC are similar to HOF, except instead of returning a new function that invokes the callback like the HOF does, the HOC can return a new component that renders the "callback" component.
- Here's what it looks like:
  function higherOrderComponent(Component) {
    return class extends React.Component {
      render() {
        return <Component />
      }
    }
  }
- Using the example from above, we can create a HOC called withHOver to encapsulate all of the hover logic and pass the hovering state to the component that it renders.
- Ultimately it will look like this. Whenever we want a component that is aware of its hovering state, we can pass the original component to our HOC:
  const InfoWithHover = withHover(Info)
  const TrendChartWithHover = withHover(TrendChart)
  const DailyChartWithHover = withHover(DailyChart)
- Then when they are rendered, they'll render the original component passing a hovering prop.
- Finally we need to implement withHover by doing three things:
  1.  Take in a Component argument.
      function withHover (Component) {

      }
  2.  Return a new component.
      function withHover (Component) {
        return class WithHover extends React.Component {

        }
      }
  3.  Render the Component argument passing it a "hovering" prop.
      function withHover(Component) {
        return class WithHover extends React.Component {
          constructor(props) {
            super(props)

            this.state = {
              hovering: false
            }

            this.mouseOver = this.mouseOver.bind(this)
            this.mouseOut = this.mouseOut.bind(this)
          }
          mouseOver() {
            this.setState({hovering: true})
          }
          mouseOut() {
            this.setState({hovering: false})
          }
          render() {
            return (
              <div onMouseOver={this.mouseOver} onMouseOut={this.mouseOut}>
                <Component hovering={this.state.hovering} />
              </div>
            )
          }
        }
      }
-----------------------------------------------------
REACT CONTEXT 
- React Context provides a way to pass data through the component tree without having to pass props down manually at every level.
- Using the React.createContext method accomplishes two things:
  1. Gives you a way to declare the data that you want available throughout the component tree.
  2. Gives a way for any component in the tree that requires taht data to be able to subscribe to it.
- Usually you create a new Context for each unique piece of data that needs to be available and it looks like this:
  const LocaleContext = React.createContext()
- Consists of two properties:
  1. .Provider - allows us to declare the data that we want available
  2. .Consumer - allows any component in that tree that needs that data to subscribe to it 
